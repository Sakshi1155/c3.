// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UniversityEnrollment {

    struct Student {
        string name;
        uint age;
        string course;
        bool enrolled;
    }

    address public admin;
    mapping(address => Student) public students;
    address[] public studentAddresses;

    event StudentEnrolled(address studentAddress, string name, uint age, string course);
    event StudentUpdated(address studentAddress, string name, uint age, string course);
    event StudentUnenrolled(address studentAddress);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    modifier onlyEnrolled(address _studentAddress) {
        require(students[_studentAddress].enrolled, "Student is not enrolled");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function enrollStudent(address _studentAddress, string memory _name, uint _age, string memory _course) public onlyAdmin {
        require(!students[_studentAddress].enrolled, "Student is already enrolled");

        students[_studentAddress] = Student({
            name: _name,
            age: _age,
            course: _course,
            enrolled: true
        });

        studentAddresses.push(_studentAddress);

        emit StudentEnrolled(_studentAddress, _name, _age, _course);
    }

    function updateStudent(address _studentAddress, string memory _name, uint _age, string memory _course) public onlyAdmin onlyEnrolled(_studentAddress) {
        students[_studentAddress].name = _name;
        students[_studentAddress].age = _age;
        students[_studentAddress].course = _course;

        emit StudentUpdated(_studentAddress, _name, _age, _course);
    }

    function unenrollStudent(address _studentAddress) public onlyAdmin onlyEnrolled(_studentAddress) {
        students[_studentAddress].enrolled = false;

        emit StudentUnenrolled(_studentAddress);
    }

    function getStudent(address _studentAddress) public view returns (string memory, uint, string memory, bool) {
        Student memory student = students[_studentAddress];
        return (student.name, student.age, student.course, student.enrolled);
    }

    function getAllStudents() public view returns (address[] memory) {
        return studentAddresses;
    }
}
